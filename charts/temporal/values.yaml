nameOverride: ""
fullnameOverride: ""
# Chart debug mode
# (eg. disable helm hook delete policy)
debug: false
imagePullSecrets: {}
# Custom Service account management
serviceAccount:
  # Whether to create service account or not
  create: false
  # Name of the service account, default: temporal.fullname
  name:
  # extraAnnotations would let users add additional annotations
  extraAnnotations:
server:
  enabled: true
  sidecarContainers: []
  image:
    repository: temporalio/server
    tag: 1.24.2
    pullPolicy: IfNotPresent
  # Global default settings (can be overridden per service)
  replicaCount: 1
  metrics:
    # Additional tags to be added to Prometheus metrics
    tags: {}
    prometheus:
      timerType: histogram
  podAnnotations: {}
  podLabels: {}
  secretLabels: {}
  secretAnnotations: {}
  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  additionalVolumes: []
  additionalVolumeMounts: []
  additionalEnv: []
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
  config:
    logLevel: "debug,info"
    # IMPORTANT: This value cannot be changed, once it's set.
    numHistoryShards: 512
    # Define your TLS configuration here. See https://docs.temporal.io/references/configuration#tls
    # for configuration options. You must also use `server.additionalVolumeMounts` and `server.additionalVolumes`
    # to mount certificates (from Secret or ConfigMap etc) to the path you use below.
    # tls:
    #   internode:
    #     server:
    #       certFile: /path/to/internode/cert/file
    #       keyFile: /path/to/internode/key/file
    #       requireClientAuth: true
    #       clientCaFiles:
    #         - /path/to/internode/serverCa
    #     client:
    #       serverName: dnsSanInInternodeCertificate
    #       rootCaFiles:
    #         - /path/to/internode/serverCa
    #   frontend:
    #     server:
    #       certFile: /path/to/frontend/cert/file
    #       keyFile: /path/to/frontend/key/file
    #       requireClientAuth: true
    #       clientCaFiles:
    #         - /path/to/internode/serverCa
    #         - /path/to/sdkClientPool1/ca
    #         - /path/to/sdkClientPool2/ca
    #     client:
    #       serverName: dnsSanInFrontendCertificate
    #       rootCaFiles:
    #         - /path/to/frontend/serverCa
    persistence:
      defaultStore: default
      additionalStores: {}
      default:
        driver: "cassandra"
        cassandra:
          hosts: []
          # port: 9042
          keyspace: "temporal"
          user: "user"
          password: "password"
          existingSecret: ""
          replicationFactor: 1
          # datacenter: "us-east-1a"
          # maxQPS: 1000
          # maxConns: 2
          consistency:
            default:
              consistency: "local_quorum"
              serialConsistency: "local_serial"
        sql:
          driver: "mysql"
          host: "mysql"
          port: 3306
          database: "temporal"
          user: "temporal"
          password: "temporal"
          existingSecret: ""
          secretName: ""
          maxConns: 20
          maxConnLifetime: "1h"
          # connectAttributes:
          # tx_isolation: 'READ-COMMITTED'
      visibility:
        driver: "cassandra"
        cassandra:
          hosts: []
          # port: 9042
          keyspace: "temporal_visibility"
          user: "user"
          password: "password"
          existingSecret: ""
          # datacenter: "us-east-1a"
          # maxQPS: 1000
          # maxConns: 2
          replicationFactor: 1
          consistency:
            default:
              consistency: "local_quorum"
              serialConsistency: "local_serial"
        sql:
          driver: "mysql"
          host: "mysql"
          port: 3306
          database: "temporal_visibility"
          user: "temporal"
          password: "temporal"
          existingSecret: ""
          secretName: ""
          maxConns: 20
          maxConnLifetime: "1h"
          # connectAttributes:
          #   tx_isolation: 'READ-COMMITTED'
  frontend:
    service:
      annotations: {} # Evaluated as template
      type: ClusterIP
      port: 7233
      httpPort: 7243
    
    ingress:
      enabled: false
      # className:
      annotations: {}
      # kubernetes.io/ingress.class: traefik
      # ingress.kubernetes.io/ssl-redirect: "false"
      # traefik.frontend.rule.type: PathPrefix
      hosts:
        - "/"
        # - "domain.com/xyz"
        # - "domain.com"
      tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local

    metrics:
      prometheus: {}
      # timerType: histogram
    podAnnotations: {}
    podLabels: {}
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    additionalEnv: []
    containerSecurityContext: {}
    topologySpreadConstraints: []
    podDisruptionBudget: {}
  history:
    service:
      # type: ClusterIP
      port: 7234
    metrics:
      prometheus: {}
      # timerType: histogram
    podAnnotations: {}
    podLabels: {}
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    additionalEnv: []
    containerSecurityContext: {}
    topologySpreadConstraints: []
    podDisruptionBudget: {}
  matching:
    service:
      # type: ClusterIP
      port: 7235
    metrics:
      prometheus: {}
      # timerType: histogram
    podAnnotations: {}
    podLabels: {}
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    additionalEnv: []
    containerSecurityContext: {}
    topologySpreadConstraints: []
    podDisruptionBudget: {}
  worker:
    service:
      # type: ClusterIP
      port: 7239
    metrics:
      # enabled: false
      prometheus: {}
      # timerType: histogram
    podAnnotations: {}
    podLabels: {}
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    additionalEnv: []
    containerSecurityContext: {}
    topologySpreadConstraints: []
    podDisruptionBudget: {}
admintools:
  enabled: true
  image:
    repository: temporalio/admin-tools
    tag: 1.24.2-tctl-1.18.1-cli-0.13.0
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 22
    annotations: {}
  podLabels: {}
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  additionalEnv: []
  resources: {}
  containerSecurityContext: {}
  securityContext: {}
  podDisruptionBudget: {}
web:
  enabled: true
  replicaCount: 1
  image:
    repository: temporalio/ui
    tag: 2.27.3
    pullPolicy: IfNotPresent
  service:
    # set type to NodePort if access to web needs access from outside the cluster
    # for more info see https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: ClusterIP
    port: 8080
    annotations: {}
    # loadBalancerIP:
  ingress:
    enabled: false
    # className:
    annotations: {}
    # kubernetes.io/ingress.class: traefik
    # ingress.kubernetes.io/ssl-redirect: "false"
    # traefik.frontend.rule.type: PathPrefix
    hosts:
      - "/"
      # - "domain.com/xyz"
      # - "domain.com"
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  podAnnotations: {}
  podLabels: {}
  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}
  additionalVolumes: []
  additionalVolumeMounts: []
  # Adjust Web UI config with environment variables:
  # https://docs.temporal.io/references/web-ui-environment-variables
  additionalEnv: []
  containerSecurityContext: {}
  securityContext: {}
  topologySpreadConstraints: []
  podDisruptionBudget: {}
schema:
  createDatabase:
    enabled: true
  setup:
    enabled: true
    backoffLimit: 100
  update:
    enabled: true
    backoffLimit: 100
  resources: {}
  containerSecurityContext: {}
  securityContext: {}
elasticsearch:
  enabled: true
  replicas: 3
  persistence:
    enabled: false
  imageTag: 7.17.3
  host: elasticsearch-master-headless
  scheme: http
  port: 9200
  version: "v7"
  logLevel: "error"
  username: ""
  password: ""
  visibilityIndex: "temporal_visibility_v1_dev"
prometheus:
  enabled: true
  nodeExporter:
    enabled: false
cassandra:
  enabled: true
  persistence:
    enabled: false
  image:
    repo: cassandra
    tag: 3.11.3
    pullPolicy: IfNotPresent
  config:
    cluster_size: 3
    ports:
      cql: 9042
    num_tokens: 4
    max_heap_size: 512M
    heap_new_size: 128M
    seed_size: 0
  service:
    type: ClusterIP
mysql:
  enabled: false
